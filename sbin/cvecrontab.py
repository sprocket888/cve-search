#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Database layer translates database calls to functions
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2015-2018  Dubravko Sever - dubravko.sever@gmail.com




import argparse
import logging

from crontab import CronTab
import re, getpass
import sys, os, time


jobname = 'cve_search'
exits = {'wrongtimeformat': 'Wrong time format, should be hh:mm (ex: 59:12)',
         'croncreated':'Cron created successfully',
         'croncreatedfail': 'Fail to create cron job',
         'cronremoved': 'Cron removed successfully',
         'cronremovedfail': 'Fail to remove cron',
         }
comment = 'cve_search'

def checkCronJobExists(comment):
    cron = CronTab(user=getpass.getuser())
    cronsearch = cron.find_comment(comment)
    cronitems = sum (1 for x in cronsearch)
    if cronitems > 0:
        return True
    else:
        return False


def checkTimeFormat(when):
    time_re = re.compile(r'^(([0-5]\d)|24:00):([01]\d|2[0-3])$')
    return time_re.match(when)

def timeSplit(when):
    time = when.split(":")
    return time[0], time[1]

def getCurrentPath():
    path = os.path.dirname(os.path.abspath(__file__))
    return path

'''It will recreate cronjob if exists of not than will create new one'''
def createCrontab(when = None):

    if checkCronJobExists(comment):
        removeCronTab()
    if when:
        if not checkTimeFormat(when):
            sys.exit(exits['wrongtimeformat'])
    else:
        when = "01:00"
    minutes, hours = timeSplit(when)
    cron = CronTab(user=getpass.getuser())
    job = cron.new(command="source {0}/../venv/bin/activate && {0}/db_updater.py -v".format(getCurrentPath()), comment=comment)
    job.setall("{0} {1} * * *".format(minutes,hours))
    try:
       cron.write()
       time.sleep(1)
       return True
    except ValueError:
        return False

'''It will remove all crontabs for current usera that have comment cve_search'''
def removeCronTab():
    if not checkCronJobExists(comment):
        return True
    try:
        cron = CronTab(user=getpass.getuser())
        cron.remove_all(comment='cve_search')
        cron.write()
        return True
    except ValueError:
        return False

def getCronTabStatus():
    cron = CronTab(user=getpass.getuser())
    for d in cron.log:
        logging.info(d)


if __name__ == '__main__':
    argParser = argparse.ArgumentParser(description='Creates crontab for CVE-SEARCH user ')
    argParser.add_argument('-c', help='<mm:hh> Creates crontab at given time, or at 1AM', default=False)
    argParser.add_argument('-r', help='<cve_search Removes crontab', default=False, action='store_true')
    args = argParser.parse_args()

    if args.c:
        if createCrontab(args.c):
            sys.exit(exits['croncreated'])
        else:
            sys.exit(exits['croncreatedfai'])
    if args.r:
        if removeCronTab():
            sys.exit(exits['cronremoved'])
        else:
            sys.exit(exits['cronremovedfail'])



